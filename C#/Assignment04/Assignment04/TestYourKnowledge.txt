1. Describe the problem generics address.
Ans: Generics address the problem of code reusability and type safety. They allow you to write a class or method that can work with any data type, providing 
the ability to use different types while ensuring type safety at compile-time.

2. How would you create a list of strings, using the generic List class?
Ans: List<string> stringList = new List<string>();

3. How many generic type parameters does the Dictionary class have?
Ans: The Dictionary class has two generic type parameters: TKey and TValue.

4. True/False. When a generic class has multiple type parameters, they must all match.
Ans: False

5. What method is used to add items to a List object?
Ans: The 'Add' method

6. Name two methods that cause items to be removed from a List.
Ans: 'Remove' and 'RemoveAt'

7. How do you indicate that a class has a generic type parameter?
Ans: By using angle brackets <> after the class name and specifying the type parameter.

8. True/False. Generic classes can only have one generic type parameter.
Ans: False

9. True/False. Generic type constraints limit what can be used for the generic type.
Ans: True

10. True/False. Constraints let you use the methods of the thing you are constraining to.
Ans: True
