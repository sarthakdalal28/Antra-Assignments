03 Object-Oriented Programming
Test your knowledge

1. What are the six combinations of access modifier keywords and what do they do? 
Ans: public: Accessible from anywhere.
     private: Accessible only within the containing class.
     protected: Accessible within the containing class and derived classes.
     internal: Accessible within the same assembly.
     protected internal: Accessible within the same assembly or from derived classes.
     private protected: Accessible within the containing class or derived classes within the same assembly.

2. What is the difference between the static, const, and readonly keywords when applied to
a type member?
Ans: static: Belongs to the type itself rather than any instance.
     const: Compile-time constant, cannot be changed.
     readonly: Runtime constant, can only be assigned during declaration or in a constructor.

3. What does a constructor do?
Ans: Initializes a new instance of a class.


4. Why is the partial keyword useful?
Ans: Allows a class, struct, or interface to be split into multiple files.

5. What is a tuple?
Ans: A data structure that holds a fixed number of items of various types.

6. What does the C# record keyword do?
Ans: Defines a reference type with value-based equality.

7. What does overloading and overriding mean?
Ans: Overloading: Multiple methods with the same name but different parameters.
     Overriding: Providing a new implementation for a method in a derived class.

8. What is the difference between a field and a property?
Ans: Field: A variable declared directly in a class.
     Property: Provides controlled access to fields.

9. How do you make a method parameter optional?
Ans: To make a method parameter optional in C#, you can provide a default value for the parameter in the method signature. This way, if the caller does not provide a value for the parameter, the default value will be used.

10. What is an interface and how is it different from abstract class?
Ans: Interface is a collection of methods which are by default abstract and public and will be implemented by the derived classes.
Methods in abstract class can be abstract method or non-abstract method but methods in an interface is by default public and abstract.

11. What accessibility level are members of an interface?
Ans:n C#, all members of an interface are implicitly public. This means that you cannot specify any other access modifier (such as private, protected, or internal) for interface members.

12. True/False. Polymorphism allows derived classes to provide different implementations
of the same method.
Ans:  True

13. True/False. The override keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
Ans: True

14. True/False. The new keyword is used to indicate that a method in a derived class is
providing its own implementation of a method.
Ans: False

15. True/False. Abstract methods can be used in a normal (non-abstract) class. 
Ans: False

16. True/False. Normal (non-abstract) methods can be used in an abstract class. 
Ans: True

17. True/False. Derived classes can override methods that were virtual in the base class. 
Ans: True

18. True/False. Derived classes can override methods that were abstract in the base class. 
Ans: True

19. True/False. In a derived class, you can override a method that was neither virtual non abstract in the
base class.
Ans: False

20. True/False. A class that implements an interface does not have to provide an implementation for all of the members of the interface.
Ans: False

21. True/False. A class that implements an interface is allowed to have other members that
arenâ€™t defined in the interface.
Ans: True

22. True/False. A class can have more than one base class.
Ans: False

23. True/False. A class can implement more than one interface.
Ans: True